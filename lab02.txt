Juan Zamudio
Rosario Huamani Carpio
January 31st, 2018
Lab02: Debugger

Problem 1
---------------------------------------------------------------------------------------------------

1)
  If we go past the breakpoint, we get a Segmentation Fault (Signal SIGSEGV).

2)
  The file is problem1.c and the line number is 17.

3)
  No we can't see the value that is passed because it was optimized out
  (nptr = <optimized out>).

4)
  0x0 - Null Pointer

5)
  -1835 ([Inferior 1 (process 10269) exited normally])

6)
  argc = 2
  argv[] = [0x7fffffffec33 "/home/jzamudio/Desktop/CS105/Debugger/problem1",
    0x7fffffffec62 "5"]

  The elements of argv[] came from the commands that were passed on the command
  line. The first element is the program name (given by program path) and the
  second element came from the argument passed to run, which was 5. Thus, that
  is why argc has a value of 2.

7)
  We wind up in problem1.c, line 5, in the loop_while function.

8)
  We see the lines of problem1.c up until line 10:

        1	#include <stdio.h>
        2
        3	int loop_while(int a, int b)
        4	{
        5	    int i = 0;
        6	    int result = a;
        7	    while (i < 256) {
        8		result += a;
        9		a -= b;
        10		i += b;

  After hitting the return key, we see the following lines of the program:

        11	    }
        12	    return result;
        13	}
        14
        15	int main(int argc, char *argv[])
        16	{
        17	    printf("%d\n", loop_while(atoi(argv[1]), 16));
        18	    return 0;
        19	}

9)
  The return key runs the program step by step like an instruction counter.

10)
  a = 5
  b = 16
  result = 32767

11)
  Lines 6, 5, 8, 9:

        6 - int result = a;
        5	- int i = 0;
        8	- result += a;
        9	- a -= b;

  The debugger is showing us these lines in this order because the compiler is
  reorganizing the lines for optimization, so they're not in the same order as
  the source code, although switching the order of lines 5 and 6 actually
  doesn't matter.

12)
  atoi: 0x4004ba
  printf: 0x4004e7

13)
  There is no call to loop_while.

14)
  a) print/x 42 prints the hexadecimal number from a decimal number 42 (print/x 42 = 0x2a)
	b) p 0x2f prints the decimal number 47 from a hexadecimal number 0x2f (p 0x2f = 47)

15)
  The constant in the sub comes from the int value of parameter b, which is 16

16)
  Since main was optimized, the call to loop_while happens inside the main function.


Problem 2
---------------------------------------------------------------------------------------------------

1)
  $1 = 1078530011

2)
  $2 = 0x40490fdb - it could be more edifying because it's the integer from above but as
  a hexadecimal value but it could tell us something.

3)
  0x601060 <puzzle1>:	0xdb	0x0f	0x49	0x40:

  The output is the result of (2) split into its four different byte components. 
  In other words, the output is the result of splitting 0x40490fdb into four byte segments.
  What is interesting is that the result of 'x/4bx &puzzle1' is the hex digit value from (2)
  but in reverse order. So, the "int" from (1) is stored in memory from least signifcant bytes
  to most signifcant bytes.

4)
  x/fw &puzzle1: 3.14159274 ~ PI!

5)
  No. The value is not correct. The value is slightly wrong because an int is less precise than
  a float so when we cast the value of pi as an int we lose precision and what we get back when we
  convert back to a float is the value of pi as precise as we can get it as an int.

6)
  x/fg &puzzle2: 2.7182818284590451 ~ e!

7)
  Yes, because it is suppose to be an array of ints, but it turns out to be an irrational number.

8)
  No, it is not correct. It is almost correct, but the last digit is different from the actual 
  value of e because, even though we have more precision with 8 bytes (2 ints from the values in
  the array), the value of e needs more than 8 bytes to be completely represented. Thus, the two
  int values can only get to a certain degree of precision.

9)
  x/sb &puzzle3: "Was that really so hard?"

10)
  No, you don’t need a print statement because gdb already prints out a value for a_size at the breakpoint.

11)
  a = 0x602010

12)
  a = 0x602010

13)
  a = 0x602014
  i = 1

14)
  We end up at the beginning of the for-loop on line 23.

15)
  a = 0x602018

16)
  p *a: 1

17)
  Line 24: *a = hmc_pomona_fix(*a);

18)
  a = 0x602030

19)
  p *a: 21


Problem 3
---------------------------------------------------------------------------------------------------

1)
  The output is 1 47 2 42 3.

2)
  It stops at line 33:

  33	    array = (int *)malloc(argc * sizeof(int));

3)
  Now it stops at line 35:

  35	    for (i = 1;  i < argc;  i++) {

4) 
  No, it just returns the result: 1 47 2 42 3.

5)
  It corresponds to the initialization of i to 1.

6)
  It tells us that line we are at is line 36.

7)
  The contents of the array are: {0, 1, 42, 2, 47, 0}

8)	
  We stop at the third breakpoint which is at line 36.

9)
  The registers that have not be covered in class are rcx, eflags, ds, es, fs, gs.

10) 
  The flags set right now are IF (Interrupt Flag) and PF (Parity Flag).

11) 
  The value is 6299664.

  The other value (0x602010) is not meaningful. It is the same except in hexadecimal.

12)
  “x/16i” starts at fix_array+15 and goes to fix_array+61 while the other one starts from the 
  beginning and runs the whole thing.

13)
  We are at line 24.

14) 
  The address of the instruction to be executed next is 0x0000000000400653.

15)
  The next instruction for stepi is line 10. The next instruction for nexti is 23.

16)
  It is line 26.

17)
  Value of rsp is: 0x7fffffffe890
  Value of rbp is: 0x7fffffffe8b0

18)
  It says there are no registers.